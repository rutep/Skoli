\BOOKMARK [1][-]{section.1}{Software Engineer}{}% 1
\BOOKMARK [2][-]{subsection.1.1}{Definition}{section.1}% 2
\BOOKMARK [2][-]{subsection.1.2}{Important skills}{section.1}% 3
\BOOKMARK [1][-]{section.2}{General project work}{}% 4
\BOOKMARK [2][-]{subsection.2.1}{Reasons for failure}{section.2}% 5
\BOOKMARK [3][-]{subsubsection.2.1.1}{Excessive schedule}{subsection.2.1}% 6
\BOOKMARK [3][-]{subsubsection.2.1.2}{Changing needs}{subsection.2.1}% 7
\BOOKMARK [3][-]{subsubsection.2.1.3}{Lack of documented project plan}{subsection.2.1}% 8
\BOOKMARK [2][-]{subsection.2.2}{Causes of Software Project Troubles}{section.2}% 9
\BOOKMARK [1][-]{section.3}{Software Process Models}{}% 10
\BOOKMARK [2][-]{subsection.3.1}{Plan-driven}{section.3}% 11
\BOOKMARK [2][-]{subsection.3.2}{Agile software process models}{section.3}% 12
\BOOKMARK [1][-]{section.4}{Requirements Engineering}{}% 13
\BOOKMARK [1][-]{section.5}{Software Engineer}{}% 14
\BOOKMARK [2][-]{subsection.5.1}{Definition}{section.5}% 15
\BOOKMARK [2][-]{subsection.5.2}{Important skills}{section.5}% 16
\BOOKMARK [3][-]{subsubsection.5.2.1}{Functional requirement}{subsection.5.2}% 17
\BOOKMARK [3][-]{subsubsection.5.2.2}{Quality requirement}{subsection.5.2}% 18
\BOOKMARK [3][-]{subsubsection.5.2.3}{General condition}{subsection.5.2}% 19
\BOOKMARK [3][-]{subsubsection.5.2.4}{Two conflict example}{subsection.5.2}% 20
\BOOKMARK [2][-]{subsection.5.3}{Technical detail in user story}{section.5}% 21
\BOOKMARK [3][-]{subsubsection.5.3.1}{How much technical detail should be in a user story}{subsection.5.3}% 22
\BOOKMARK [3][-]{subsubsection.5.3.2}{Example: good user story}{subsection.5.3}% 23
\BOOKMARK [3][-]{subsubsection.5.3.3}{Example: bad user story}{subsection.5.3}% 24
\BOOKMARK [1][-]{section.6}{Effort Estimation}{}% 25
\BOOKMARK [2][-]{subsection.6.1}{Planing poker}{section.6}% 26
\BOOKMARK [3][-]{subsubsection.6.1.1}{Based on differing skills and experience, individual team members may estimate different efforts for any requirement. Discuss whether planning poker eliminates this problem}{subsection.6.1}% 27
\BOOKMARK [3][-]{subsubsection.6.1.2}{Assume your team came up with an effort spread of 8, 13, 40 and 40 for a particular user story. Interpret and deal with the result}{subsection.6.1}% 28
\BOOKMARK [2][-]{subsection.6.2}{Anchoring effect}{section.6}% 29
\BOOKMARK [1][-]{section.7}{Project Planning}{}% 30
\BOOKMARK [2][-]{subsection.7.1}{Assume your 4-person team completed tasks comprising 20 person-days in a 2-week iteration. Calculate the velocity you should assume when planning the next iteration}{section.7}% 31
\BOOKMARK [2][-]{subsection.7.2}{Imagine the a client expects more functionality in a release then you will be able to complete until the deadline, based on your effort estimates. Suggest a strategy you could use in this situation}{section.7}% 32
\BOOKMARK [1][-]{section.8}{Object-Oriented Analysis and Design}{}% 33
\BOOKMARK [2][-]{subsection.8.1}{UML University library diagram}{section.8}% 34
\BOOKMARK [2][-]{subsection.8.2}{Generalization and specialization seem to be contracting the same concept\(inheritance\). Explain why both terms are accurate nevertheless}{section.8}% 35
\BOOKMARK [2][-]{subsection.8.3}{Two key differences between abstract classes and interfaces in java}{section.8}% 36
\BOOKMARK [2][-]{subsection.8.4}{Explain the difference between aggregation and composition of classes in an object-oriented model}{section.8}% 37
\BOOKMARK [1][-]{section.9}{Object-Oriented Programming}{}% 38
\BOOKMARK [2][-]{subsection.9.1}{Attributes}{section.9}% 39
\BOOKMARK [2][-]{subsection.9.2}{Explain why any static methods of java class can access only the static attributes of the class}{section.9}% 40
\BOOKMARK [2][-]{subsection.9.3}{Class variable}{section.9}% 41
\BOOKMARK [2][-]{subsection.9.4}{Instance variable}{section.9}% 42
\BOOKMARK [2][-]{subsection.9.5}{Instance vs Class}{section.9}% 43
\BOOKMARK [2][-]{subsection.9.6}{Explain how singleton pattern ensures that only one instance of a class can exists in the system}{section.9}% 44
\BOOKMARK [1][-]{section.10}{Testing}{}% 45
\BOOKMARK [1][-]{section.11}{Design Patterns}{}% 46
\BOOKMARK [1][-]{section.12}{Explain the purpose of Proxy pattern, and give an example of a scenario \(outside the travel domain\) where its use would be beneficial}{}% 47
