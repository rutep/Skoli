%{
	import java.io.*;
	import java.util.*;
%}


%token<sval> LITERAL,NAME,OPNAME,ERROR,DEFINE
%token<sval> OP1,OP2,OP3,OP4,OP5
%token IF,ELSE,ELSIF,WHILE,VAR
%token RETURN

%left RETURN, '='
%left OP1
%right OP2
%left OP3
%left OP4
%left OP5

%type <obj> program ,fundecl
%type <ival> ids, idlist

%%

start										/*@ \label{grammarstart} @*/
  : program { generateProgram(name,((Vector<Object>)($1)).toArray()); }
	;

program
  : program fundecl { ((Vector<Object>)($1)).add($2); $$=$1; }
  | fundecl         { $$=new Vector<Object>(); ((Vector<Object>)($$)).add($1); }
	;

fundecl
  : {
      varCount = 0;
      varTable = new HashMap<String,Integer>();
    }
    NAME '(' ids ')' '{'
      VAR idlist ';'
    '}'
    {
      $$ = new Object[]{$2,$4,$8};
    }
  ;

ids
	:	/* empty */		{ $$=0; }
	| ids ',' NAME  { addVar($3); $$=$1+1; }
  | NAME          { addVar($1); $$+=1; }
  ;

idlist
  : idlist ',' NAME { addVar($3); $$=$1+1; }
  | NAME            { addVar($1); $$+=1; }
%%

static private String name;
private NanoMorphoLexer lexer;
private int varCount;
private HashMap<String,Integer> varTable;

private void addVar( String name )
{
  if( varTable.get(name) != null )
  yyerror("Variable "+name+" already exists");
  varTable.put(name,varCount++);
}
private int findVar( String name )
	{
		Integer res = varTable.get(name);
		if( res == null )
			yyerror("Variable "+name+" does not exist");
		return res;
	}

	int last_token_read;

	private int yylex()
	{
		int yyl_return = -1;
		try
		{
			yylval = null;
			last_token_read = yyl_return = lexer.yylex();
			if( yylval==null )
				yylval = new NanoMorphoParserVal(NanoMorphoParser.yyname[yyl_return]);
		}
		catch (IOException e)
		{
			System.err.println("IO error: "+e);
		}
		return yyl_return;
	}

	public void yyerror( String error )
	{
		System.out.println("Error:  "+error);
		System.out.println("Token:  "+NanoMorphoParser.yyname[last_token_read]);
		System.exit(1);
	}
  
  public NanoMorphoParser( Reader r )
	{
		lexer = new NanoMorphoLexer(r,this);
	}

public static void main( String args[] )
throws IOException
{
  NanoMorphoParser yyparser = new NanoMorphoParser(new FileReader(args[0]));
  name = args[0].substring(0,args[0].lastIndexOf('.'));
  yyparser.yyparse();
}

public static void emit( String s )		/*@ \label{byaccgeneratorstart} @*/
{
  System.out.println(s);
}

static void generateProgram( String name, Object[] p )
{
  emit("\""+name+".mexe\" = main in");
  emit("!{{");
  for( int i=0 ; i!=p.length ; i++ ) generateFunction((Object[])p[i]);
  emit("}}*BASIS;");
}

static void generateFunction( Object[] f )
	{
		String fname = (String)f[0];
		int count = (Integer)f[1];
    int test = (Integer)f[2];
    emit(test+"");
		emit("#\""+fname+"[f"+count+"]\" =");
		emit("[");
	  // generateExprR((Object[])f[2]);
		emit("];");
	}
