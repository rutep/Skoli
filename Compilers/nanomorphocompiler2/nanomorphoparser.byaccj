%{
	import java.io.*;
	import java.util.*;
%}

%token <sval> NAME,LITERAL,OP1,OP2,OP3,OP4,OP5,OP6,OP7
%token ERROR,VAR,RETURN,WHILE,IF,ELSE,ELSIF,AND,OR,NOT,GO,UNOP,FUN
%type <obj> program,function,expr,exprs,ifrest,arglist,nonemptyarglist,body
%type <ival> decls, namelist, parlist
%type <sval> op, fname

%right RETURN, '='
%right OR
%right AND
%right NOT
%left OP1
%right OP2
%left OP3
%left OP4
%left OP5
%left OP6
%left OP7
%right UNOP

%%

start
	:	program
			{ generateProgram(filename,(Vector<Object>)$1); }
	;

program
	:	function
			{ $$ = new Vector<Object>(); ((Vector<Object>)$$).add($1); }
	|	program function
			{ $$ = $1; ((Vector<Object>)$$).add($2); }
	;

function
	:		{ varCount = 0; varTable = new HashMap<String,Integer>(); }
		fname '(' parlist ')' '{' decls exprs '}'
			{ $$ = new Object[]{$2,$4,$7,new Object[]{"BODY",((Vector<Object>)$8).toArray()}}; }
	;

fname:	NAME | op;

op:	OP1 | OP2 | OP3 | OP4 | OP5 | OP6 | OP7;
	
decls
	:	/* nothing */
			{ $$ = 0; }
	|	decls VAR namelist ';'
			{ $$ = $1+$3; }
	;

parlist
	:	/* t贸mt */
			{ $$ = 0; }
	|	namelist
	;
	
namelist
	:	NAME
			{ addVar($1); $$ = 1; }
	|	namelist ',' NAME
			{ addVar($3); $$ = 1+$1; }
	;
	
exprs
	:	/* t贸mt */
			{ $$ = new Vector<Object>(); }
	|	exprs expr ';'
			{ $$ = $1; ((Vector<Object>)$$).add($2); }
	;

expr
	:	RETURN expr
			{ $$ = new Object[]{"RETURN",$2}; }
	|	NAME '=' expr
			{ $$ = new Object[]{"STORE",findVar($1),$3}; }
	|	NOT expr
			{ $$ = new Object[]{"NOT",$2}; }
	|	expr AND expr
			{ $$ = new Object[]{"AND",$1,$3}; }
	|	expr OR expr
			{ $$ = new Object[]{"OR",$1,$3}; }
	|	expr OP1 expr
			{ $$ = new Object[]{"CALL",$2,new Object[]{$1,$3}}; }
	|	expr OP2 expr
			{ $$ = new Object[]{"CALL",$2,new Object[]{$1,$3}}; }
	|	expr OP3 expr
			{ $$ = new Object[]{"CALL",$2,new Object[]{$1,$3}}; }
	|	expr OP4 expr
			{ $$ = new Object[]{"CALL",$2,new Object[]{$1,$3}}; }
	|	expr OP5 expr
			{ $$ = new Object[]{"CALL",$2,new Object[]{$1,$3}}; }
	|	expr OP6 expr
			{ $$ = new Object[]{"CALL",$2,new Object[]{$1,$3}}; }
	|	expr OP7 expr
			{ $$ = new Object[]{"CALL",$2,new Object[]{$1,$3}}; }
	|	NAME
			{ $$ = new Object[]{"FETCH",findVar($1)}; }
	|	NAME '(' nonemptyarglist ')'
			{ $$ = new Object[]{"CALL",$1,((Vector<Object>)$3).toArray()}; }
	|	NAME '(' ')'
			{
				if( varTable.get($1)==null )
					$$ = new Object[]{"CALL",$1,new Object[]{}};
				else
					$$ = new Object[]{"CALLCLOSUREVAR",findVar($1)};
			}
	|	FUN '(' ')' body
			{ $$ = new Object[]{"CLOSURE",varCount,$4}; }
	|	GO NAME '(' arglist ')'
			//{ $$ = new Object[]{"GO1",$2,((Vector<Object>)$4).toArray()}; }
			{ $$ = new Object[]{"GO2",varCount,$2,((Vector<Object>)$4).toArray()}; }
	|	GO body
			{ $$ = new Object[]{"GOBLOCK",varCount,$2}; }
	|	WHILE expr body
			{ $$ = new Object[]{"WHILE",$2,$3}; }
	|	IF expr body ifrest
			{ $$ = new Object[]{"IF",$2,$3,$4}; }
	|	LITERAL
			{ $$ = new Object[]{"LITERAL",$1}; }
	|	op expr %prec UNOP
			{ $$ = new Object[]{"CALL",$1,new Object[]{$2}}; }
	|	'(' expr ')'
			{ $$ = $2; }
	|	'[' arglist ']'
			{ $$ = new Object[]{"LIST",((Vector<Object>)$2).toArray()}; }
	;
	

ifrest
	:	/* t贸mt */
			{ $$ = new Object[]{"LITERAL","null"}; }
	|	ELSE body
			{ $$ = $2; }
	|	ELSIF expr body ifrest
			{ $$ = new Object[]{"IF",$2,$3,$4}; }
	;

arglist
	:	/* t贸mt */
			{ $$ = new Vector<Object>(); }
	|	nonemptyarglist
	;

nonemptyarglist
	:	nonemptyarglist ',' expr
			{ $$ = $1; ((Vector<Object>)$$).add($3); }
	|	expr
			{ $$ = new Vector<Object>(); ((Vector<Object>)$$).add($1); }
	;

body
	:	'{' exprs '}'
			{ $$ = new Object[]{"BODY",((Vector<Object>)$2).toArray()}; }
	;

%%

	private NanoMorphoLexer lexer;
	private static String filename;

	private int yylex()
	{
		int yyl_return = -1;
		try
		{
			yylval = new NanoMorphoParserVal(0);
			yyl_return = lexer.yylex();
		}
		catch (IOException e)
		{
			System.err.println("IO error: "+e);
		}
		return yyl_return;
	}

	private static int varCount;
	private static HashMap<String,Integer> varTable;

	private void addVar( String name )
	{
		if( varTable.get(name) != null )
			yyerror("Variable "+name+" already exists");
		varTable.put(name,varCount++);
	}

	private int findVar( String name )
	{
		Integer res = varTable.get(name);
		if( res == null )
			yyerror("Variable "+name+" does not exist");
		return res;
	}
    
	public void yyerror( String error )
	{
		System.err.println("Error:  "+error);
		System.err.println("Line:   "+lexer.getLine());
		System.err.println("Column: "+lexer.getColumn());
		System.exit(1);
	}

	public NanoMorphoParser( Reader r )
	{
		lexer = new NanoMorphoLexer(r,this);
	}

	public static void main( String args[] )
	  	throws IOException
	{
		filename = args[0];
		NanoMorphoParser yyparser = new NanoMorphoParser(new FileReader(filename));
		yyparser.yyparse();
	}
	
	public static void emit( String s )
	{
		System.out.println(s);
	}
	
    static void generateProgram( String filename, Vector<Object> funs )
    {
        String programname = filename.substring(0,filename.indexOf('.'));
        emit("\""+programname+".mexe\" = main in");
        emit("!");
        emit("{{");
        for( Object f: funs ) generateFunction((Object[])f);
        emit("}}");
        emit("*");
        emit("BASIS;");
    }
    
    static void generateFunction( Object[] fun )
    {
        emit("#\""+fun[0]+"[f"+fun[1]+"]\" =");
        emit("[");
        int varcount = (Integer)fun[2];
        if( varcount!=0 ) emit("(MakeVal null)");
        for( int i=0 ; i!=varcount ; i++ ) emit("(Push)");
		generateExprR((Object[])fun[3]);
        emit("];");
    }
    
    static int nextLab = 1;
    
    static void generateExpr( Object[] e )
    {
        switch( (String)e[0] )
        {
        case "FETCH":
			// ["FETCH",pos]
            emit("(Fetch "+e[1]+")");
            return;
        case "STORE":
			// ["STORE",pos,expr]
            generateExpr((Object[])e[2]); emit("(Store "+e[1]+")");
            return;
		case "BODY":
			// ["BODY",[e1,...,eN]]
			for( Object ee: (Object[])e[1] ) generateExpr((Object[])ee);
			return;
        case "IF":
			// ["IF,cond,thenexpr,elseexpr]
            {
                int elslab = nextLab++;
                int endlab = nextLab++;
                generateJump((Object[])e[1],elslab,0);
                generateExpr((Object[])e[2]);
                emit("(Go _"+endlab+")");
                emit("_"+elslab+":");
				generateExpr((Object[])e[3]);
                emit("_"+endlab+":");
            }
            return;
        case "WHILE":
			// ["WHILE",cond,bodyexpr]
            {
                int startlab = nextLab++;
                int endlab = nextLab++;
                emit("_"+startlab+":");
                generateJump((Object[])e[1],endlab,0);
                generateExpr((Object[])e[2]);
                emit("(Go _"+startlab+")");
                emit("_"+endlab+":");
            }
            return;
		case "LIST":
			// ["LIST",[e1,...,eN]]
			{
				Object[] arr = (Object[])e[1];
				if( arr.length==0 )
				{
					emit("(MakeVal null)");
					return;
				}
				generateExpr((Object[])arr[0]);
				for( int i=1 ; i<arr.length ; i++ ) generateExprP((Object[])arr[i]);
				emit("(MakeValP null)");
				for( int i=0 ; i!=arr.length ; i++ ) emit("(Call #\":[f2]\" 2)");
			}
			return;
        case "CALL":
			// ["CALL",name,[e1,...,eN]]
            {
                Object[] args = (Object[])e[2];
                if( args.length!=0 ) generateExpr((Object[])args[0]);
                for( int i=1 ; i<args.length ; i++ ) generateExprP((Object[])args[i]);
                emit("(Call #\""+e[1]+"[f"+args.length+"]\" "+args.length+")");
            }
            return;
        case "CALLCLOSUREVAR":
			// ["CALLCLOSUREVAR",pos]
			emit("(Fetch "+e[1]+")");
			emit("(CallClosure 0)");
			return;
		case "CLOSURE":
			// ["CLOSURE",varCount,bodyexpr]
			{
				int m = (Integer)e[1];
				Object[] body = (Object[])e[2];
				int pastlab = nextLab++;
				emit("(MakeClosure 0 0 "+m+" _"+pastlab+")");
				generateExprR(body);
				emit("_"+pastlab+":");
			}
			return;
        case "GOBLOCK":
			// ["GOBLOCK",varCount,bodyexpr]
			{
				int m = (Integer)e[1];
				Object[] body = (Object[])e[2];
				int pastlab = nextLab++;
				emit("(MakeClosure 0 0 "+m+" _"+pastlab+")");
				generateExprR(body);
				emit("_"+pastlab+":");
				emit("(Call #\"startTask[f1]\" 1)");
			}
			return;
        case "GO1":
			// ["GO1",fname,[e1,...,eN]]
            {
				int innerfun = nextLab++;
				int innerpast = nextLab++;
				int past = nextLab++;
				String fname = (String)e[1];
                Object[] args = (Object[])e[2];
				emit("(Go _"+past+")");
				emit("_"+innerfun+":");
				emit("(MakeClosure 0 0 "+args.length+" _"+innerpast+")");
                if( args.length!=0 )
				{
					emit("(Fetch "+(args.length-1)+")");
					emit("(Drop 1)");
				}
				emit("(CallR #\""+fname+"[f"+args.length+"]\" "+args.length+")");
				emit("_"+innerpast+":");
				emit("(CallR #\"startTask[f1]\" 1)");
				emit("_"+past+":");
                if( args.length!=0 ) generateExpr((Object[])args[0]);
                for( int i=1 ; i<args.length ; i++ ) generateExprP((Object[])args[i]);
                emit("(Call _"+innerfun+" "+args.length+")");
            }
            return;
        case "GO2":
			// ["GO2",varCount,fname,[e1,...,eN]]
            {
				int pastlab = nextLab++;
				Object[] args = (Object[])e[3];
				emit("(MakeClosure 0 0 "+e[1]+" _"+pastlab+")");
				if( args.length!=0 )
				{
					generateExpr((Object[])args[0]);
					for( int i=1 ; i<args.length ; i++ ) generateExprP((Object[])args[i]);
				}
				emit("(CallR #\""+e[2]+"[f"+args.length+"]\" "+args.length+")");
				emit("_"+pastlab+":");
				emit("(Call #\"startTask[f1]\" 1)");
            }
            return;
        case "RETURN":
			// ["RETURN",expr]
            generateExprR((Object[])e[1]);
            return;
        case "LITERAL":
			// ["LITERAL",lit]
            emit("(MakeVal "+e[1]+")");
            return;
		case "NOT":
			// ["NOT",expr]
			generateExpr((Object[])e[1]); emit("(Not)");
			return;
		case "AND":
			// ["AND",e1,e2]
			{
				int falselab = nextLab++;
				generateExpr((Object[])e[1]);
				emit("(GoFalse _"+falselab+")");
				generateExpr((Object[])e[2]);
				emit("_"+falselab+":");
			}
			return;
		case "OR":
			// ["OR",e1,e2]
			{
				int truelab = nextLab++;
				generateExpr((Object[])e[1]);
				emit("(GoTrue _"+truelab+")");
				generateExpr((Object[])e[2]);
				emit("_"+truelab+":");
			}
			return;
        default:
            throw new Error("Invalid expression type: "+e[0]);
        }
    }

    static void generateExprR( Object[] e )
    {
        switch( (String)e[0] )
        {
        case "FETCH":
            emit("(FetchR "+e[1]+")");
            return;
        case "STORE":
            generateExpr((Object[])e[2]); emit("(StoreR "+e[1]+")");
            return;
		case "BODY":
			{
				Object[] exprs = (Object[])e[1];
				if( exprs.length==0 )
				{
					emit("(Return)");
					return;
				}
				for( int i=0 ; i<exprs.length-1 ; i++ )
					generateExpr((Object[])exprs[i]);
				generateExprR((Object[])exprs[exprs.length-1]);
			}
			return;
        case "IF":
            {
                int elslab = nextLab++;
                generateJump((Object[])e[1],elslab,0);
                generateExprR((Object[])e[2]);
                emit("_"+elslab+":");
				generateExprR((Object[])e[3]);
            }
            return;
        case "CALL":
            {
                Object[] args = (Object[])e[2];
                if( args.length!=0 ) generateExpr((Object[])args[0]);
                for( int i=1 ; i<args.length ; i++ )
                {
                    generateExprP((Object[])args[i]);
                }
                emit("(CallR #\""+e[1]+"[f"+args.length+"]\" "+args.length+")");
            }
            return;
        case "RETURN":
            generateExprR((Object[])e[1]);
            return;
        case "LITERAL":
            emit("(MakeValR "+e[1]+")");
            return;
		case "AND":
			{
				int falselab = nextLab++;
				generateExpr((Object[])e[1]);
				emit("(GoFalse _"+falselab+")");
				generateExprR((Object[])e[2]);
				emit("_"+falselab+":");
				emit("(Return)");
			}
			return;
		case "OR":
			{
				int truelab = nextLab++;
				generateExpr((Object[])e[1]);
				emit("(GoTrue _"+truelab+")");
				generateExprR((Object[])e[2]);
				emit("_"+truelab+":");
				emit("(Return)");
			}
			return;
        default:
			generateExpr(e);
			emit("(Return)");
			return;
        }
	}
    
    static void generateExprP( Object[] e )
    {
        switch( (String)e[0] )
        {
        case "FETCH":
            emit("(FetchP "+e[1]+")");
            return;
        case "STORE":
            generateExprP((Object[])e[2]); emit("(Store "+e[1]+")");
            return;
        case "IF":
            {
                int elslab = nextLab++;
                int endlab = nextLab++;
                generateJumpP((Object[])e[1],elslab,0);
                generateExpr((Object[])e[2]);
                emit("(Go _"+endlab+")");
                emit("_"+elslab+":");
				generateExpr((Object[])e[3]);
                emit("_"+endlab+":");
            }
            return;
        case "WHILE":
            {
                int startlab = nextLab++;
                int endlab = nextLab++;
                emit("_"+startlab+":");
                generateJumpP((Object[])e[1],endlab,0);
                generateExpr((Object[])e[2]);
                emit("(Go _"+startlab+")");
                emit("_"+endlab+":");
            }
            return;
		case "LIST":
			{
				Object[] arr = (Object[])e[1];
				if( arr.length==0 )
				{
					emit("(MakeValP null)");
					return;
				}
				for( int i=0 ; i<arr.length ; i++ ) generateExprP((Object[])arr[i]);
				emit("(MakeValP null)");
				for( int i=0 ; i!=arr.length ; i++ ) emit("(Call #\":[f2]\" 2)");
			}
			return;
        case "CALL":
            {
                Object[] args = (Object[])e[2];
                if( args.length==0 )
				{
					emit("(CallP #\""+e[1]+"[f0]\" 0)");
					return;
				}
                for( int i=0 ; i<args.length ; i++ )
                {
                    generateExprP((Object[])args[i]);
                }
                emit("(Call #\""+e[1]+"[f"+args.length+"]\" "+args.length+")");
            }
            return;
        case "LITERAL":
            emit("(MakeValP "+e[1]+")");
            return;
		case "NOT":
			generateExprP((Object[])e[1]); emit("(Not)");
			return;
		case "AND":
			{
				int falselab = nextLab++;
				generateExprP((Object[])e[1]);
				emit("(GoFalse _"+falselab+")");
				generateExpr((Object[])e[2]);
				emit("_"+falselab+":");
			}
			return;
		case "OR":
			{
				int truelab = nextLab++;
				generateExprP((Object[])e[1]);
				emit("(GoTrue _"+truelab+")");
				generateExpr((Object[])e[2]);
				emit("_"+truelab+":");
			}
			return;
        default:
			emit("(Push)");
			generateExpr(e);
			return;
        }
	}
    
    static void generateJump( Object[] e, int falselab, int truelab )
    {
		switch( (String)e[0] )
		{
		case "AND":
			{
				int endlab = nextLab++;
				generateJump((Object[])e[1],falselab==0?endlab:falselab,0);
				generateJump((Object[])e[2],falselab,truelab);
				emit("_"+endlab+":");
			}
			return;
		case "OR":
			{
				int endlab = nextLab++;
				generateJump((Object[])e[1],0,truelab==0?endlab:truelab);
				generateJump((Object[])e[2],falselab,truelab);
				emit("_"+endlab+":");
			}
			return;
		case "NOT":
			generateJump((Object[])e[1],truelab,falselab);
			return;
		case "LITERAL":
			if( e[1].equals("false") || e[1].equals("null") )
			{
				if( falselab!=0 ) emit("(Go _"+falselab+")");
			}
			else
			{
				if( truelab!=0 ) emit("(Go _"+truelab+")");
			}
			return;
		default:
			generateExpr(e);
			if( falselab!=0 ) emit("(GoFalse _"+falselab+")");
			if( truelab!=0 ) emit("(GoTrue _"+truelab+")");
			return;
		}
	}
    
    static void generateJumpP( Object[] e, int falselab, int truelab )
    {
		switch( (String)e[0] )
		{
		case "AND":
			{
				int endlab = nextLab++;
				generateJumpP((Object[])e[1],falselab==0?endlab:falselab,0);
				generateJump((Object[])e[2],falselab,truelab);
				emit("_"+endlab+":");
			}
			return;
		case "OR":
			{
				int endlab = nextLab++;
				generateJumpP((Object[])e[1],0,truelab==0?endlab:truelab);
				generateJump((Object[])e[2],falselab,truelab);
				emit("_"+endlab+":");
			}
			return;
		case "NOT":
			generateJumpP((Object[])e[1],truelab,falselab);
			return;
		case "LITERAL":
			emit("(Push)");
			generateJump(e,falselab,truelab);
			return;
		default:
			generateExprP(e);
			if( falselab!=0 ) emit("(GoFalse _"+falselab+")");
			if( truelab!=0 ) emit("(GoTrue _"+truelab+")");
			return;
		}
	}
